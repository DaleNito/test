apiVersion: v1
kind: Namespace
metadata:
  name: test-portainer-ns
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: test-portainer-sa-clusteradmin
  namespace: test-portainer-ns
  labels:
    app: test-portainer
---
kind: "PersistentVolumeClaim"
apiVersion: "v1"
metadata:
  name: test-portainer-pvc
  namespace: test-portainer-ns  
  annotations:
    volume.alpha.kubernetes.io/storage-class: "generic"
  labels:
    app: test-portainer
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "10Gi"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: test-portainer-crb
  labels:
    app: test-portainer
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  namespace: test-portainer-ns
  name: test-portainer-sa-clusteradmin
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-portainer-instance
  namespace: test-portainer-ns
  labels:
    app: test-portainer
spec:
  replicas: 1
  strategy:
    type: "Recreate"
  selector:
    matchLabels:
      app: test-portainer
  template:
    metadata:
      labels:
        app: test-portainer
    spec:
      nodeSelector:
        {}
      serviceAccountName: test-portainer-sa-clusteradmin
      volumes:
         - name: "data"
           persistentVolumeClaim:
             claimName: test-portainer-pvc
      containers:
        - name: test-portainer-container
          image: "portainerci/portainer:pr5916"
          imagePullPolicy: Always
          args:  [ '--tunnel-port','30776' ]
          volumeMounts:
            - name: data
              mountPath: /data
          ports:
            - name: http
              containerPort: 9000
              protocol: TCP
            - name: https
              containerPort: 9443
              protocol: TCP
            - name: tcp-edge
              containerPort: 8000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: 9443
              scheme: HTTPS
          readinessProbe:
            httpGet:
              path: /
              port: 9443
              scheme: HTTPS
          resources:
            {}
---
apiVersion: v1
kind: Service
metadata:
  name: test-portainer-service
  namespace: test-portainer-ns
  labels:
    app: test-portainer
spec:
  type: ClusterIP
  selector:
    app: test-portainer
  ports:
  - protocol: TCP
    port: 9444
    targetPort: 9000
    name: https
  - protocol: TCP
    port: 8001
    targetPort: 8000
    name: edge
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: test-portainer-ingress
  namespace: test-portainer-ns
  annotations:
    kubernetes.io/ingress.class: default
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/rewrite-target: "/$2"
spec:
  rules:
  - host: 192.168.189.128.nip.io
    http:
      paths:
      - path: /portainer(/|$)(.*)
        pathType: Prefix
        backend:
          serviceName: test-portainer-service
          servicePort: 9444
